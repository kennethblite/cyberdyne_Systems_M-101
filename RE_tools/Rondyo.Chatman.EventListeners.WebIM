
// /home/kensalt/practice/discord/terminator/Chatman/Rondyo.Chatman.EventListeners.WebIM.dll
// Rondyo.Chatman.EventListeners.WebIM, Version=1.1.0.0, Culture=neutral, PublicKeyToken=c5cbd59d58549e5d
// Global type: <Module>
// Architecture: x86
// Runtime: v2.0.50727
// This assembly is signed with a strong name key.
// Hash algorithm: SHA1
// Public key: 0024000004800000940000000602000000240000525341310004000001000100191d59fa159c23ec130eff416767aae23b0533b32ead9676e97436dde82b04dd0aae2f743f0b259ead5186c4f921b0230d12318b1fdb6feb32914e1e733a4a9d1693e0473756c24584e144719025749e0f1333e24fa4d6a34a8e3a811b2cb7ea0cb4698f36cfe0c396ed89b6870fa9c1dd357cf01295ab5914e28faf5c2936d8

using System;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using ႠႰႭ;
using ႥႥႨ;
using ႥႥႨႣ;
using ႷႭႣ;
using ႷႭႥ;
using ႷႭႨ;

[assembly: AssemblyTrademark("")]
[assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]
[assembly: ComVisible(false)]
[assembly: Guid("fe7faa62-194c-4004-9e60-b37f8cc42035")]
[assembly: Debuggable(DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints | DebuggableAttribute.DebuggingModes.EnableEditAndContinue | DebuggableAttribute.DebuggingModes.DisableOptimizations)]
[assembly: AssemblyFileVersion("1.1.0.0")]
[assembly: AssemblyCompany("Rondyo")]
[assembly: CompilationRelaxations(8)]
[assembly: AssemblyCopyright("© 2008-2011 Rondyo Ltd. All Rights Reserved")]
[assembly: AssemblyProduct("Chatman")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyTitle("Chatman")]
[assembly: AssemblyVersion("1.1.0.0")]
namespace ႠႰႭ
{
	internal sealed class Ⴍ
	{
		private static readonly char[] m_Ⴍ;

		private static readonly string[] m_Ⴍ;

		internal static string ႰႷ(int Ⴐ)
		{
			int num = Ⴐ ^ 0x1A7D9A5D;
			string result;
			if ((result = m_Ⴍ[num]) != null)
			{
				return result;
			}
			object obj;
			switch (num)
			{
			default:
				obj = null;
				break;
			case 0:
				obj = "Ցऌ\u05ff\u0cfaఉඥम\u05aaձट\u05f9\u0cfcక\u0de2७֏ձज\u05c4\u0cd8\u0c5b\u0de3त\u05b4ՠछ\u05ffವఌ෬ण\u05bcջउ";
				break;
			case 1:
				obj = "\u059dզऌע೧\u0c5b\u0de1न\u05abՠऌע೬ఒ෫प\u05f8Ճछׯ\u0cdcశඥफ\u05b1ոऊר೧\u0c5b\u0df2त\u05b6հऑ\u05fa";
				break;
			}
			string text = (string)obj;
			int length;
			char[] array = new char[length = text.Length];
			char[] ⴍ = (char[])(object)ႠႰႭ.Ⴍ.m_Ⴍ;
			int num2 = ⴍ.Length;
			for (int num3 = 0; num3 < length; num3 = 1 + num3)
			{
				array[num3] = (char)(ushort)(text[num3] ^ ⴍ[(num3 + Ⴐ) % num2]);
			}
			result = new string(array);
			m_Ⴍ[num] = result;
			return result;
		}

		static Ⴍ()
		{
			byte[] publicKeyToken;
			int num = (publicKeyToken = Assembly.GetExecutingAssembly().GetName().GetPublicKeyToken()).Length;
			char[] array = new char[num];
			for (int i = 0; i < num; i++)
			{
				int num2 = i;
				int num3 = publicKeyToken[i] & 0xFF;
				array[num2] = (char)(num3 ^ (num3 << 4));
			}
			ႠႰႭ.Ⴍ.m_Ⴍ = (string[])(object)array;
			m_Ⴍ = new string[2];
		}
	}
}
namespace ႨႳႨ
{
	public class Ⴈ : IDisposable, ႷႭႥ.Ⴈ
	{
		private ႷႭႨ.Ⴀ m_Ⴈ;

		private bool m_Ⴈ;

		private static ႥႥႨႣ.Ⴀ.ႣႣ m_Ⴈ;

		private static ႥႥႨႣ.Ⴀ.ႣႣ m_Ⴐ;

		public bool Ⴐ => true;

		public unsafe Ⴈ()
		{
			*(ႷႭႨ.Ⴀ*)(&this.m_Ⴈ) = ႷႭႨ.Ⴀ.Ⴐ;
			*(bool*)(&this.m_Ⴈ) = false;
			base..ctor();
		}

		~Ⴈ()
		{
			ႰႤ(Ⴅ: false);
		}

		[DllImport("FilterWnd.dll", EntryPoint = "CreateFilterWnd")]
		public static extern int ႰႠ();

		[DllImport("FilterWnd.dll", EntryPoint = "DestroyFilterWnd")]
		public static extern int ႰႼ();

		public unsafe void ႰႣ(ႷႭႣ.Ⴜ Ⴃ)
		{
			if (*(ႷႭႨ.Ⴀ*)(&this.m_Ⴈ) != ႷႭႨ.Ⴀ.Ⴈ)
			{
				try
				{
					if (m_Ⴈ == null)
					{
						m_Ⴈ = delegate
						{
							ႰႠ();
						};
					}
					ႥႥႨႣ.Ⴀ.ႨႠႠ(m_Ⴈ);
				}
				catch (Exception ⴓ)
				{
					ႥႥႨ.Ⴗ.ႳႤ(ႠႰႭ.Ⴍ.ႰႷ(444439133), ⴓ);
				}
				*(ႷႭႨ.Ⴀ*)(&this.m_Ⴈ) = ႷႭႨ.Ⴀ.Ⴈ;
			}
		}

		public unsafe void ႭႨ()
		{
			if (*(ႷႭႨ.Ⴀ*)(&this.m_Ⴈ) != ႷႭႨ.Ⴀ.Ⴓ)
			{
				try
				{
					if (*(ႥႥႨႣ.Ⴀ.ႣႣ*)(&ႨႳႨ.Ⴈ.Ⴐ) == null)
					{
						*(ႥႥႨႣ.Ⴀ.ႣႣ*)(&ႨႳႨ.Ⴈ.Ⴐ) = delegate
						{
							ႰႼ();
						};
					}
					ႥႥႨႣ.Ⴀ.ႨႠႠ(*(ႥႥႨႣ.Ⴀ.ႣႣ*)(&ႨႳႨ.Ⴈ.Ⴐ));
				}
				catch (Exception ⴓ)
				{
					ႥႥႨ.Ⴗ.ႳႤ(ႠႰႭ.Ⴍ.ႰႷ(444439132), ⴓ);
				}
				*(ႷႭႨ.Ⴀ*)(&this.m_Ⴈ) = ႷႭႨ.Ⴀ.Ⴓ;
			}
		}

		public void Dispose()
		{
			ႰႤ(Ⴅ: true);
			GC.SuppressFinalize(this);
		}

		protected unsafe void ႰႤ(bool Ⴅ)
		{
			//Discarded unreachable code: IL_0002, IL_0019, IL_0035, IL_004e, IL_0066
			if (!(*(bool*)(&this.m_Ⴈ)))
			{
				if (300 > 300 - 283)
				{
					if (!Ⴅ)
					{
						goto IL_000c;
					}
					if ((750 + 750 * 750) % 2 == 0)
					{
					}
				}
				ႭႨ();
				if (574 >= 574 - 240)
				{
					goto IL_000c;
				}
			}
			goto IL_0004;
			IL_0004:
			*(bool*)(&this.m_Ⴈ) = true;
			return;
			IL_000c:
			while (273 <= 273 - 73)
			{
			}
			goto IL_0004;
		}

		private static void <Initialize>b__0()
		{
			ႰႠ();
		}

		private static void <Terminate>b__2()
		{
			ႰႼ();
		}
	}
}
