// Warning: Some assembly references could not be resolved automatically. This might lead to incorrect decompilation of some parts,
// for ex. property getter/setter access. To get optimal decompilation results, please manually add the missing references to the list of loaded assemblies.

// /home/kensalt/practice/discord/terminator/Chatman/Rondyo.Chatman.Version.dll
// Rondyo.Chatman.Version, Version=1.1.0.0, Culture=neutral, PublicKeyToken=c5cbd59d58549e5d
// Global type: <Module>
// Architecture: AnyCPU (64-bit preferred)
// Runtime: v2.0.50727
// This assembly is signed with a strong name key.
// Hash algorithm: SHA1
// Public key: 0024000004800000940000000602000000240000525341310004000001000100191d59fa159c23ec130eff416767aae23b0533b32ead9676e97436dde82b04dd0aae2f743f0b259ead5186c4f921b0230d12318b1fdb6feb32914e1e733a4a9d1693e0473756c24584e144719025749e0f1333e24fa4d6a34a8e3a811b2cb7ea0cb4698f36cfe0c396ed89b6870fa9c1dd357cf01295ab5914e28faf5c2936d8

using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using ႭႭႭ;

[assembly: AssemblyTrademark("")]
[assembly: ComVisible(false)]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Rondyo")]
[assembly: Debuggable(DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints | DebuggableAttribute.DebuggingModes.EnableEditAndContinue | DebuggableAttribute.DebuggingModes.DisableOptimizations)]
[assembly: CompilationRelaxations(8)]
[assembly: Guid("18cfdd48-2b02-471a-9757-95e286a28e94")]
[assembly: AssemblyFileVersion("1.1.0.0")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyCopyright("© 2008-2011 Rondyo Ltd. All Rights Reserved")]
[assembly: AssemblyProduct("Chatman")]
[assembly: AssemblyTitle("Chatman")]
[assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]
[assembly: AssemblyVersion("1.1.0.0")]
namespace ႣႣႰ
{
	[DebuggerNonUserCode]
	[GeneratedCode("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
	[CompilerGenerated]
	internal sealed class Ⴐ
	{
		private static ResourceManager m_Ⴐ;

		private static CultureInfo m_Ⴐ;

		[EditorBrowsable(EditorBrowsableState.Advanced)]
		internal static ResourceManager Ⴈ
		{
			get
			{
				int num = 1;
				while (true)
				{
					switch (num)
					{
					default:
						num = (object.ReferenceEquals(ႣႣႰ.Ⴐ.m_Ⴐ, null) ? 2 : 0);
						break;
					case 2:
					{
						ResourceManager resourceManager = (ResourceManager)(object)(ႣႣႰ.Ⴐ.m_Ⴐ = (CultureInfo)(object)new ResourceManager("ႣႣႰ.Ⴐ", typeof(Ⴐ).Assembly));
						num = 0;
						break;
					}
					case 0:
						return (ResourceManager)(object)ႣႣႰ.Ⴐ.m_Ⴐ;
					}
				}
			}
		}

		[EditorBrowsable(EditorBrowsableState.Advanced)]
		internal static CultureInfo Ⴈ
		{
			get
			{
				return m_Ⴐ;
			}
			set
			{
				m_Ⴐ = value;
			}
		}

		internal Ⴐ()
		{
		}

		internal static string ႰႭႳ()
		{
			return ႣႣႰ.Ⴐ.Ⴈ.GetString(Ⴍ.ႳႭႨ(137679771), m_Ⴐ);
		}
	}
	public class Ⴗ
	{
		private bool Ⴐ;

		public Version Ⴈ
		{
			get
			{
				int revision = 1;
				return new Version(3, 3, 0, revision);
			}
		}

		public string Ⴈ
		{
			get
			{
				int num = 1;
				string result;
				while (true)
				{
					int num2;
					switch (num)
					{
					default:
						num2 = (Ⴐ ? 2 : 0);
						goto IL_001d;
					case 0:
						result = string.Empty;
						break;
					case 2:
						result = ႣႣႰ.Ⴐ.ႰႭႳ();
						break;
					}
					break;
					IL_001d:
					num = num2;
				}
				return result;
			}
		}

		public Ⴗ()
		{
			Ⴐ = false;
		}
	}
}
namespace ႭႭႭ
{
	internal sealed class Ⴍ
	{
		private static readonly char[] m_Ⴍ;

		private static readonly string[] m_Ⴍ;

		internal static string ႳႭႨ(int Ⴍ)
		{
			int num = Ⴍ ^ 0x834D39B;
			string result;
			if ((result = ႭႭႭ.Ⴍ.m_Ⴍ[num]) != null)
			{
				return result;
			}
			object obj;
			switch (num)
			{
			default:
				obj = null;
				break;
			case 0:
				obj = "छ\u05bdզऍפ\u0cfaక\u0dc8स\u05abՠ\u093cר\u0cc0ఋ\u0de2\u093f\u05b9հछש";
				break;
			}
			string text = (string)obj;
			int length;
			char[] array = new char[length = text.Length];
			char[] ⴍ = (char[])(object)ႭႭႭ.Ⴍ.m_Ⴍ;
			int num2 = ⴍ.Length;
			for (int num3 = 0; num3 < length; num3 = 1 + num3)
			{
				array[num3] = (char)(ushort)(text[num3] ^ ⴍ[(num3 + Ⴍ) % num2]);
			}
			result = new string(array);
			ႭႭႭ.Ⴍ.m_Ⴍ[num] = result;
			return result;
		}

		static Ⴍ()
		{
			byte[] publicKeyToken;
			int num = (publicKeyToken = Assembly.GetExecutingAssembly().GetName().GetPublicKeyToken()).Length;
			char[] array = new char[num];
			for (int i = 0; i < num; i++)
			{
				int num2 = i;
				int num3 = publicKeyToken[i] & 0xFF;
				array[num2] = (char)(num3 ^ (num3 << 4));
			}
			ႭႭႭ.Ⴍ.m_Ⴍ = (string[])(object)array;
			m_Ⴍ = new string[1];
		}
	}
}
