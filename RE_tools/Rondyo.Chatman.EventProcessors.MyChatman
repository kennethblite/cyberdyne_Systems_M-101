
// /home/kensalt/practice/discord/terminator/Chatman/Rondyo.Chatman.EventProcessors.MyChatman.dll
// Rondyo.Chatman.EventProcessors.MyChatman, Version=1.1.0.0, Culture=neutral, PublicKeyToken=c5cbd59d58549e5d
// Global type: <Module>
// Architecture: AnyCPU (64-bit preferred)
// Runtime: v2.0.50727
// This assembly is signed with a strong name key.
// Hash algorithm: SHA1
// Public key: 0024000004800000940000000602000000240000525341310004000001000100191d59fa159c23ec130eff416767aae23b0533b32ead9676e97436dde82b04dd0aae2f743f0b259ead5186c4f921b0230d12318b1fdb6feb32914e1e733a4a9d1693e0473756c24584e144719025749e0f1333e24fa4d6a34a8e3a811b2cb7ea0cb4698f36cfe0c396ed89b6870fa9c1dd357cf01295ab5914e28faf5c2936d8

using Rondyo.Chatman.Data;
using System;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using ႠႣႭ;
using ႨႠႰ;
using ႭႨႰ;
using ႭႷႰ;
using ႷႭႠ;
using ႷႭႨ;
using ႷႭႳ;

[assembly: AssemblyFileVersion("1.1.0.0")]
[assembly: Guid("3d4f0acd-e23c-45b4-ad66-f9f1856614e0")]
[assembly: ComVisible(false)]
[assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]
[assembly: CompilationRelaxations(8)]
[assembly: Debuggable(DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints | DebuggableAttribute.DebuggingModes.EnableEditAndContinue | DebuggableAttribute.DebuggingModes.DisableOptimizations)]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyTitle("Chatman")]
[assembly: AssemblyCopyright("© 2008-2011 Rondyo Ltd. All Rights Reserved")]
[assembly: AssemblyProduct("Chatman")]
[assembly: AssemblyCompany("Rondyo")]
[assembly: AssemblyVersion("1.1.0.0")]
namespace ႠႣႭ
{
	internal sealed class Ⴍ
	{
		private static readonly char[] m_Ⴍ;

		private static readonly string[] m_Ⴍ;

		internal static string ႷႰႰ(int Ⴀ)
		{
			int num = Ⴀ ^ 0x1A7D9A5D;
			string result;
			if ((result = m_Ⴍ[num]) != null)
			{
				return result;
			}
			object obj;
			switch (num)
			{
			default:
				obj = null;
				break;
			case 0:
				obj = "ժ\u0954ױ೫";
				break;
			}
			string text = (string)obj;
			int length;
			char[] array = new char[length = text.Length];
			char[] ⴍ = (char[])(object)ႠႣႭ.Ⴍ.m_Ⴍ;
			int num2 = ⴍ.Length;
			for (int num3 = 0; num3 < length; num3 = 1 + num3)
			{
				array[num3] = (char)(ushort)(text[num3] ^ ⴍ[(num3 + Ⴀ) % num2]);
			}
			result = new string(array);
			m_Ⴍ[num] = result;
			return result;
		}

		static Ⴍ()
		{
			byte[] publicKeyToken;
			int num = (publicKeyToken = Assembly.GetExecutingAssembly().GetName().GetPublicKeyToken()).Length;
			char[] array = new char[num];
			for (int i = 0; i < num; i++)
			{
				int num2 = i;
				int num3 = publicKeyToken[i] & 0xFF;
				array[num2] = (char)(num3 ^ (num3 << 4));
			}
			ႠႣႭ.Ⴍ.m_Ⴍ = (string[])(object)array;
			m_Ⴍ = new string[1];
		}
	}
}
namespace ႨႷႰ
{
	public class Ⴐ : ႨႠႰ.Ⴗ
	{
		private new ႷႭႳ.Ⴃ Ⴐ;

		private new static DateTime Ⴐ;

		public unsafe override ႭႷႰ.Ⴈ Ⴓ(ႭႷႰ.Ⴐ Ⴀ, Personality Ⴍ, ႷႭႨ.Ⴓ Ⴄ)
		{
			int num = 8;
			string[] array2 = default(string[]);
			Guid ⴍ = default(Guid);
			string[] array = default(string[]);
			while (true)
			{
				switch (num)
				{
				case 14:
					num = 2;
					continue;
				case 16:
					((ႷႭႳ.Ⴃ*)(&this.Ⴐ))->ႨႥ(Convert.ToInt32(Ⴀ.Ⴄ), null);
					num = 2;
					continue;
				case 12:
					((ႷႭႳ.Ⴃ*)(&this.Ⴐ))->ႨႨ(Convert.ToInt32(Ⴀ.Ⴄ), null);
					num = 2;
					continue;
				case 5:
					array2 = Ⴀ.Ⴄ.Split('|');
					num = ((array2.Length >= 2) ? 3 : 0);
					continue;
				case 0:
					num = 2;
					continue;
				case 3:
					((ႷႭႳ.Ⴃ*)(&this.Ⴐ))->ႨႤ(new Guid(array2[0]), new Guid(array2[1]));
					num = 2;
					continue;
				case 7:
					array2 = Ⴀ.Ⴄ.Split('|');
					num = ((array2.Length >= 2) ? 1 : 10);
					continue;
				case 10:
					num = 2;
					continue;
				case 1:
					ⴍ = Guid.Empty;
					num = ((!(array2[0] != string.Empty)) ? 11 : 15);
					continue;
				case 15:
					ⴍ = new Guid(array2[0]);
					num = 11;
					continue;
				case 11:
					((ႷႭႳ.Ⴃ*)(&this.Ⴐ))->ႨႠ(ⴍ, Convert.ToInt32(array2[1]));
					num = 2;
					continue;
				case 4:
					num = (((DateTime.Now - Ⴐ).Days <= 1) ? 17 : 9);
					continue;
				case 9:
					ႭႨႰ.Ⴐ.Ⴐ.Ⴃ.Ⴀ.ႨႤႥ(ႷႭႠ.Ⴗ.ႨႷ);
					Ⴐ = DateTime.Now;
					num = 17;
					continue;
				case 17:
					num = 2;
					continue;
				case 19:
					ႭႨႰ.Ⴐ.Ⴐ.Ⴃ.Ⴀ.ႨႤႥ(ႷႭႠ.Ⴗ.ႨႤ);
					num = 2;
					continue;
				case 18:
					array = Ⴀ.Ⴄ.Split(new string[1]
					{
						ႠႣႭ.Ⴍ.ႷႰႰ(444439133)
					}, StringSplitOptions.RemoveEmptyEntries);
					num = ((array.Length != 3) ? 6 : 13);
					continue;
				case 13:
					((ႷႭႳ.Ⴃ*)(&this.Ⴐ))->Ⴐ(array[0], array[1], array[2]);
					num = 2;
					continue;
				case 6:
					((ႷႭႳ.Ⴃ*)(&this.Ⴐ))->ႳႼ();
					num = 2;
					continue;
				case 2:
				{
					ႭႷႰ.Ⴈ ⴈ = new ႭႷႰ.Ⴈ();
					ⴈ.Ⴐ = ႭႷႰ.Ⴓ.Ⴈ;
					return ⴈ;
				}
				}
				int num2;
				switch (Ⴀ.Ⴗ)
				{
				default:
					num2 = 14;
					break;
				case 23:
					num2 = 12;
					break;
				case 24:
					num2 = 16;
					break;
				case 25:
					num2 = 5;
					break;
				case 26:
					num2 = 7;
					break;
				case 27:
					num2 = 4;
					break;
				case 28:
					num2 = 19;
					break;
				case 29:
					num2 = 18;
					break;
				}
				num = num2;
			}
		}

		public override void ႨႨႷ()
		{
			base.ႨႨႷ();
			ႭႨႰ.Ⴐ.Ⴀ += ႨႷႳ;
		}

		private unsafe void ႨႷႳ(ႭႨႰ.Ⴐ Ⴀ)
		{
			ႭႨႰ.Ⴐ.Ⴀ -= ႨႷႳ;
			*(ႷႭႳ.Ⴃ*)(&this.Ⴐ) = ႭႨႰ.Ⴐ.Ⴐ.Ⴃ.Ⴅ;
		}
	}
}
