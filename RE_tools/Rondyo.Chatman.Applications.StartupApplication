
// /home/kensalt/practice/discord/terminator/Chatman/Rondyo.Chatman.Applications.StartupApplication.dll
// Rondyo.Chatman.Applications.StartupApplication, Version=1.1.0.0, Culture=neutral, PublicKeyToken=c5cbd59d58549e5d
// Global type: <Module>
// Architecture: x86
// Runtime: v2.0.50727
// This assembly is signed with a strong name key.
// Hash algorithm: SHA1
// Public key: 0024000004800000940000000602000000240000525341310004000001000100191d59fa159c23ec130eff416767aae23b0533b32ead9676e97436dde82b04dd0aae2f743f0b259ead5186c4f921b0230d12318b1fdb6feb32914e1e733a4a9d1693e0473756c24584e144719025749e0f1333e24fa4d6a34a8e3a811b2cb7ea0cb4698f36cfe0c396ed89b6870fa9c1dd357cf01295ab5914e28faf5c2936d8

using Rondyo.Chatman.Applications.Context;
using Rondyo.Chatman.Data;
using Rondyo.Chatman.Interfaces.Public;
using System;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using ႥႥႨ;
using ႭႷ;
using ႷႭႤ;
using ႷႭႳ;

[assembly: AssemblyFileVersion("1.1.0.0")]
[assembly: Guid("8696372e-d12c-42fd-9d03-c39c95885b79")]
[assembly: ComVisible(false)]
[assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]
[assembly: CompilationRelaxations(8)]
[assembly: Debuggable(DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints | DebuggableAttribute.DebuggingModes.EnableEditAndContinue | DebuggableAttribute.DebuggingModes.DisableOptimizations)]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyTitle("Chatman")]
[assembly: AssemblyCopyright("© 2008-2011 Rondyo Ltd. All Rights Reserved")]
[assembly: AssemblyProduct("Chatman")]
[assembly: AssemblyCompany("Rondyo")]
[assembly: AssemblyVersion("1.1.0.0")]
namespace ႤႰ
{
	public class Ⴐ : BaseChatmanApplication, IChatmanApplication, IChatmanBackgroundApplication
	{
		public override void Initialize()
		{
			base.Initialize();
			ႣႷ();
		}

		private void ႣႷ()
		{
			try
			{
				ႷႭႤ.Ⴈ ⴈ = base.Context as ႷႭႤ.Ⴈ;
				Personality personality = ⴈ.Ⴈ.Ⴓ.ႷႳ();
				ChatmanAction chatmanAction = null;
				if (personality != null)
				{
					personality.ႼႠ();
					try
					{
						chatmanAction = personality.SpecialActionsByCode[50];
					}
					catch (Exception ⴍ)
					{
						ႥႥႨ.Ⴗ.ႨႷႭ(ⴍ);
					}
				}
				if (chatmanAction == null)
				{
					personality = ⴈ.Ⴈ.Ⴓ.Ⴈ.ႰႨ(ႭႷ.Ⴍ.Ⴓ(1402238815));
					personality.ႼႠ();
					try
					{
						chatmanAction = personality.SpecialActionsByCode[50];
					}
					catch (Exception ⴍ)
					{
						ႥႥႨ.Ⴗ.ႨႷႭ(ⴍ);
					}
				}
				if (chatmanAction != null)
				{
					try
					{
						ႷႭႳ.Ⴈ ⴈ2 = ⴈ.Ⴈ as ႷႭႳ.Ⴈ;
						ⴈ2.ႥႤ(chatmanAction, Ⴓ: true);
					}
					catch (Exception ⴍ)
					{
						ႥႥႨ.Ⴗ.ႨႷႭ(ⴍ);
						ႥႥႨ.Ⴗ.ႨႷႤ(ႭႷ.Ⴍ.Ⴓ(1402238814));
					}
				}
				else
				{
					ႥႥႨ.Ⴗ.ႨႷႤ(ႭႷ.Ⴍ.Ⴓ(1402238813));
				}
			}
			catch (Exception ⴍ)
			{
				ႥႥႨ.Ⴗ.ႳႤ(ႭႷ.Ⴍ.Ⴓ(1402238812), ⴍ);
			}
		}

		public override void Terminate()
		{
		}

		public void Pause()
		{
		}

		public void Resume()
		{
		}
	}
}
namespace ႭႷ
{
	internal sealed class Ⴍ
	{
		private static readonly char[] m_Ⴍ;

		private static readonly string[] m_Ⴍ;

		internal static string Ⴓ(int Ⴍ)
		{
			int num = Ⴍ ^ 0x5394775F;
			string result;
			if ((result = ႭႷ.Ⴍ.m_Ⴍ[num]) != null)
			{
				return result;
			}
			object obj;
			switch (num)
			{
			default:
				obj = null;
				break;
			case 0:
				obj = "\u05c9\u0cf0ఝ\u0de4स\u05b4ՠ";
				break;
			case 1:
				obj = "स\u05ec\u0cfcగ\u0de0ऩ\u05f8ՠऑ\u05ad೦ఎ෧ठ\u05b1ՠफ़\u05feೡచ\u0df7ह\u05adդफ़\u05ec\u0cf6ఏ෬ढ\u05b6Ժ";
				break;
			case 2:
				obj = "Ւटפ\u0cf9ఞ\u0de1७\u05acջफ़ס\u0cfaఘ\u0de4ह\u05bdԴचר\u0cf3చ\u0df0ड\u05acԴऎר೧ఈ෪ण\u05b9ոग\u05f9೬\u0c5bඨ७\u05bbյऐ\u05aaೡ\u0c5b\u0df5न\u05aaղऑ\u05ff\u0cf8\u0c5b\u0df6ह\u05b9զऊ\u05f8\u0ce5\u0c5b\u0de4म\u05acսऑף\u0cbb";
				break;
			case 3:
				obj = "\u059dզऌע೧\u0c5b\u0df7स\u05b6պगףೲ\u0c5b\u0df6ह\u05b9զऊ\u05f8\u0ce5\u0c5b\u0de4ऽ\u05a8ոग\u05ee\u0cf4ఏ෬ढ\u05b6Դ";
				break;
			}
			string text = (string)obj;
			int length;
			char[] array = new char[length = text.Length];
			char[] ⴍ = (char[])(object)ႭႷ.Ⴍ.m_Ⴍ;
			int num2 = ⴍ.Length;
			for (int num3 = 0; num3 < length; num3 = 1 + num3)
			{
				array[num3] = (char)(ushort)(text[num3] ^ ⴍ[(num3 + Ⴍ) % num2]);
			}
			result = new string(array);
			ႭႷ.Ⴍ.m_Ⴍ[num] = result;
			return result;
		}

		static Ⴍ()
		{
			byte[] publicKeyToken;
			int num = (publicKeyToken = Assembly.GetExecutingAssembly().GetName().GetPublicKeyToken()).Length;
			char[] array = new char[num];
			for (int i = 0; i < num; i++)
			{
				int num2 = i;
				int num3 = publicKeyToken[i] & 0xFF;
				array[num2] = (char)(num3 ^ (num3 << 4));
			}
			ႭႷ.Ⴍ.m_Ⴍ = (string[])(object)array;
			m_Ⴍ = new string[4];
		}
	}
}
