
// /home/kensalt/practice/discord/terminator/Chatman/Rondyo.Chatman.EventListeners.MSN.dll
// Rondyo.Chatman.EventListeners.MSN, Version=1.1.0.0, Culture=neutral, PublicKeyToken=c5cbd59d58549e5d
// Global type: <Module>
// Architecture: x86
// Runtime: v2.0.50727
// This assembly is signed with a strong name key.
// Hash algorithm: SHA1
// Public key: 0024000004800000940000000602000000240000525341310004000001000100191d59fa159c23ec130eff416767aae23b0533b32ead9676e97436dde82b04dd0aae2f743f0b259ead5186c4f921b0230d12318b1fdb6feb32914e1e733a4a9d1693e0473756c24584e144719025749e0f1333e24fa4d6a34a8e3a811b2cb7ea0cb4698f36cfe0c396ed89b6870fa9c1dd357cf01295ab5914e28faf5c2936d8

using System;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using ႥႥႣ;
using ႥႥႨ;
using ႥႥႨႠ;
using ႥႥႨႥ;
using ႥႼႭ;
using ႷႭႣ;
using ႷႭႥ;
using ႷႭႨ;

[assembly: AssemblyFileVersion("1.1.0.0")]
[assembly: Guid("dd658d5e-a2f3-49a5-879d-6cffa5c163b1")]
[assembly: ComVisible(false)]
[assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]
[assembly: CompilationRelaxations(8)]
[assembly: Debuggable(DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints | DebuggableAttribute.DebuggingModes.EnableEditAndContinue | DebuggableAttribute.DebuggingModes.DisableOptimizations)]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyTitle("Chatman")]
[assembly: AssemblyCopyright("© 2008-2011 Rondyo Ltd. All Rights Reserved")]
[assembly: AssemblyProduct("Chatman")]
[assembly: AssemblyCompany("Rondyo")]
[assembly: AssemblyVersion("1.1.0.0")]
namespace ႥႼႭ
{
	internal sealed class Ⴍ
	{
		private static readonly char[] Ⴀ;

		private static readonly string[] Ⴀ;

		internal static string ႰႷ(int Ⴃ)
		{
			int num = Ⴃ ^ 0x1A7D9A5D;
			string result;
			if ((result = Ⴀ[num]) != null)
			{
				return result;
			}
			object obj;
			switch (num)
			{
			default:
				obj = null;
				break;
			case 0:
				obj = "Շऩב\u0cc7ఔ෫ऩ\u05a1ջळמ\u0cdbష෪ब\u05bcձऌ\u05a3ೱగ෩";
				break;
			case 1:
				obj = "\u058bՠट\u05ffೡ\u0c29෪ण\u05bcխऑ\u05b9\u0cd8న\u0dcb";
				break;
			case 2:
				obj = "\u05c8೧ఉ෪\u093f\u05f8էऊ\u05ec೧ఏ෬ण\u05bfԴबע\u0cfbట\u0dfcढ\u05ec\u0559भ׃";
				break;
			case 3:
				obj = "ळ\u05fe\u0cfbన\u0df1ब\u05aaՠछ\u05ff\u0cc5ఉ෪म\u05f8ՠख\u05ff\u0cf0చ\u0de1७\u05bdլग\u05f9\u0cfcక\u0de2\u0963\u05f6Ժ";
				break;
			}
			string text = (string)obj;
			int length;
			char[] array = new char[length = text.Length];
			char[] ⴀ = (char[])(object)Ⴍ.Ⴀ;
			int num2 = ⴀ.Length;
			for (int num3 = 0; num3 < length; num3 = 1 + num3)
			{
				array[num3] = (char)(ushort)(text[num3] ^ ⴀ[(num3 + Ⴃ) % num2]);
			}
			result = new string(array);
			Ⴀ[num] = result;
			return result;
		}

		static Ⴍ()
		{
			byte[] publicKeyToken;
			int num = (publicKeyToken = Assembly.GetExecutingAssembly().GetName().GetPublicKeyToken()).Length;
			char[] array = new char[num];
			for (int i = 0; i < num; i++)
			{
				int num2 = i;
				int num3 = publicKeyToken[i] & 0xFF;
				array[num2] = (char)(num3 ^ (num3 << 4));
			}
			Ⴍ.Ⴀ = (string[])(object)array;
			Ⴀ = new string[4];
		}
	}
}
namespace ႨႷႨ
{
	public class Ⴈ : IDisposable, ႷႭႥ.Ⴈ
	{
		private ႷႭႨ.Ⴀ m_Ⴈ;

		private bool m_Ⴈ;

		public bool Ⴐ => false;

		public unsafe Ⴈ()
		{
			*(ႷႭႨ.Ⴀ*)(&this.m_Ⴈ) = ႷႭႨ.Ⴀ.Ⴐ;
			m_Ⴈ = false;
			base..ctor();
		}

		~Ⴈ()
		{
			ႰႤ(Ⴃ: false);
		}

		public unsafe void ႰႣ(ႷႭႣ.Ⴜ Ⴃ)
		{
			//Discarded unreachable code: IL_0002, IL_0022, IL_0026, IL_0050
			if (*(ႷႭႨ.Ⴀ*)(&this.m_Ⴈ) == ႷႭႨ.Ⴀ.Ⴈ)
			{
				if (375 > 375 - 37)
				{
				}
				return;
			}
			ႥႥႨႥ.Ⴓ.ႨႷႼ(ႰႠ);
			*(ႷႭႨ.Ⴀ*)(&this.m_Ⴈ) = ႷႭႨ.Ⴀ.Ⴈ;
			if ((386 + 386 * 386) % 2 == 0)
			{
			}
		}

		private void ႰႠ()
		{
			try
			{
				ႥႥႣ.Ⴗ.ႳႥ(ႣႳ.ႨႠႰ(ႥႼႭ.Ⴍ.ႰႷ(444439133)), ႥႼႭ.Ⴍ.ႰႷ(444439132));
			}
			catch (Exception ⴓ)
			{
				ႥႥႨ.Ⴗ.ႳႤ(ႥႼႭ.Ⴍ.ႰႷ(444439135), ⴓ);
			}
			ႥႥႨ.Ⴗ.ႨႷႣ(ႥႼႭ.Ⴍ.ႰႷ(444439134));
		}

		public unsafe void ႰႼ()
		{
			//Discarded unreachable code: IL_0002, IL_0022, IL_0026, IL_003f
			while (*(ႷႭႨ.Ⴀ*)(&this.m_Ⴈ) == ႷႭႨ.Ⴀ.Ⴓ)
			{
				if (658 > 658 - 19)
				{
					return;
				}
			}
			*(ႷႭႨ.Ⴀ*)(&this.m_Ⴈ) = ႷႭႨ.Ⴀ.Ⴓ;
			if (168 < 168 - 157)
			{
			}
		}

		public void Dispose()
		{
			ႰႤ(Ⴃ: true);
			GC.SuppressFinalize(this);
		}

		protected void ႰႤ(bool Ⴃ)
		{
			//Discarded unreachable code: IL_0017, IL_0033, IL_004a, IL_0061
			while (true)
			{
				bool flag = m_Ⴈ;
				while (true)
				{
					if (flag)
					{
						goto IL_0002;
					}
					if (227 >= 227 - 194)
					{
						flag = !Ⴃ;
						if (!flag)
						{
							if (766 <= 766 - 98)
							{
								break;
							}
							goto IL_004c;
						}
					}
					goto IL_000a;
					IL_000a:
					if (181 > 181 - 73)
					{
						goto IL_0002;
					}
					goto IL_004c;
					IL_004c:
					ႰႼ();
					if (false)
					{
						continue;
					}
					goto IL_000a;
					IL_0002:
					m_Ⴈ = true;
					return;
				}
			}
		}
	}
}
