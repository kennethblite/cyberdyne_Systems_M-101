			public unsafe bool ႭႰႨ()
			{
				int num = 13;
				bool result = default(bool);
				while (true)
				{
					int num2;
					switch (num)
					{
					default:
						num = ((Ⴈ != null) ? 3 : 5);
						break;
					case 5:
						result = false;
						num = 7;
						break;
					case 3:
						Ⴅ = *(Ⴃ*)(&Ⴈ.Ⴗ);
						num = ((Ⴈ.Ⴀ == null) ? 1 : 10);
						break;
					case 1:
						num = 8;
						break;
					case 9:
						Ⴈ = Ⴈ.Ⴗ;
						num = 8;
						break;
					case 8:
						num = ((Ⴈ.Ⴗ == null) ? 14 : 11);
						break;
					case 11:
						num2 = ((Ⴈ == Ⴈ.Ⴗ.Ⴀ) ? 1 : 0);
						goto IL_00e6;
					case 14:
						num2 = 0;
						goto IL_00e6;
					case 2:
						Ⴈ = Ⴈ.Ⴗ;
						num = 12;
						break;
					case 10:
						Ⴈ = Ⴈ.Ⴀ;
						num = 0;
						break;
					case 6:
						Ⴈ = Ⴈ.Ⴍ;
						num = 0;
						break;
					case 0:
						num = ((Ⴈ.Ⴍ != null) ? 6 : 4);
						break;
					case 4:
						num = 12;
						break;
					case 12:
						result = true;
						num = 7;
						break;
					case 7:
						{
							return result;
						}
						IL_00e6:
						num = ((num2 != 0) ? 9 : 2);
						break;
					}
				}
			}
		}

		public unsafe bool ႭႰႭ(Ⴃ Ⴍ)
		{
			int num = 22;
			ႨႥ ⴈႥ = default(ႨႥ);
			int num3 = default(int);
			bool result = default(bool);
			ႨႥ ⴈႥ2 = default(ႨႥ);
			ႨႥ ⴈႥ3 = default(ႨႥ);
			while (true)
			{
				int num2;
				switch (num)
				{
				default:
					num = ((Ⴍ != null) ? 43 : 51);
					break;
				case 51:
					throw new ArgumentNullException();
				case 43:
					num = ((Ⴀ != null) ? 26 : 50);
					break;
				case 50:
					Ⴀ = new ႨႥ(Ⴍ);
					num = 42;
					break;
				case 26:
					ⴈႥ = Ⴀ;
					num = 17;
					break;
				case 55:
					num3 = Ⴍ.CompareTo(*(Ⴃ*)(&ⴈႥ.Ⴗ));
					num = ((num3 >= 0) ? 63 : 71);
					break;
				case 71:
					num = ((ⴈႥ.Ⴍ == null) ? 40 : 45);
					break;
				case 45:
					ⴈႥ = ⴈႥ.Ⴍ;
					num = 0;
					break;
				case 40:
					ⴈႥ.Ⴍ = new ႨႥ(Ⴍ, ⴈႥ);
					ⴈႥ.Ⴅ--;
					num = 60;
					break;
				case 0:
					num = 56;
					break;
				case 63:
					num = ((num3 <= 0) ? 37 : 62);
					break;
				case 62:
					num = ((ⴈႥ.Ⴀ == null) ? 14 : 7);
					break;
				case 7:
					ⴈႥ = ⴈႥ.Ⴀ;
					num = 28;
					break;
				case 14:
					ⴈႥ.Ⴀ = new ႨႥ(Ⴍ, ⴈႥ);
					ⴈႥ.Ⴅ++;
					num = 60;
					break;
				case 28:
					num = 56;
					break;
				case 37:
					result = false;
					num = 61;
					break;
				case 56:
					num = 17;
					break;
				case 17:
				{
					bool flag = true;
					num = 55;
					break;
				}
				case 60:
					num = 33;
					break;
				case 77:
					num = ((ⴈႥ.Ⴗ.Ⴍ != ⴈႥ) ? 68 : 12);
					break;
				case 12:
					ⴈႥ.Ⴗ.Ⴅ--;
					num = 48;
					break;
				case 68:
					ⴈႥ.Ⴗ.Ⴅ++;
					num = 48;
					break;
				case 48:
					ⴈႥ = ⴈႥ.Ⴗ;
					num = ((ⴈႥ.Ⴅ != -2) ? 84 : 83);
					break;
				case 83:
					ⴈႥ2 = ⴈႥ.Ⴍ;
					num = ((ⴈႥ2.Ⴅ != -1) ? 19 : 15);
					break;
				case 15:
					ⴈႥ2.Ⴗ = ⴈႥ.Ⴗ;
					num = ((ⴈႥ.Ⴗ != null) ? 8 : 34);
					break;
				case 34:
					Ⴀ = ⴈႥ2;
					num = 2;
					break;
				case 8:
					num = ((ⴈႥ.Ⴗ.Ⴍ != ⴈႥ) ? 75 : 27);
					break;
				case 27:
					ⴈႥ.Ⴗ.Ⴍ = ⴈႥ2;
					num = 79;
					break;
				case 75:
					ⴈႥ.Ⴗ.Ⴀ = ⴈႥ2;
					num = 79;
					break;
				case 79:
					num = 2;
					break;
				case 2:
					ⴈႥ.Ⴍ = ⴈႥ2.Ⴀ;
					num = ((ⴈႥ.Ⴍ == null) ? 70 : 53);
					break;
				case 53:
					ⴈႥ.Ⴍ.Ⴗ = ⴈႥ;
					num = 70;
					break;
				case 70:
					ⴈႥ2.Ⴀ = ⴈႥ;
					ⴈႥ.Ⴗ = ⴈႥ2;
					ⴈႥ2.Ⴅ = 0;
					ⴈႥ.Ⴅ = 0;
					num = 38;
					break;
				case 19:
					ⴈႥ3 = ⴈႥ2.Ⴀ;
					ⴈႥ3.Ⴗ = ⴈႥ.Ⴗ;
					num = ((ⴈႥ.Ⴗ != null) ? 25 : 41);
					break;
				case 41:
					Ⴀ = ⴈႥ3;
					num = 78;
					break;
				case 25:
					num = ((ⴈႥ.Ⴗ.Ⴍ != ⴈႥ) ? 3 : 73);
					break;
				case 73:
					ⴈႥ.Ⴗ.Ⴍ = ⴈႥ3;
					num = 20;
					break;
				case 3:
					ⴈႥ.Ⴗ.Ⴀ = ⴈႥ3;
					num = 20;
					break;
				case 20:
					num = 78;
					break;
				case 78:
					ⴈႥ2.Ⴀ = ⴈႥ3.Ⴍ;
					num = ((ⴈႥ2.Ⴀ == null) ? 59 : 44);
					break;
				case 44:
					ⴈႥ2.Ⴀ.Ⴗ = ⴈႥ2;
					num = 59;
					break;
				case 59:
					ⴈႥ.Ⴍ = ⴈႥ3.Ⴀ;
					num = ((ⴈႥ.Ⴍ == null) ? 31 : 58);
					break;
				case 58:
					ⴈႥ.Ⴍ.Ⴗ = ⴈႥ;
					num = 31;
					break;
				case 31:
					ⴈႥ3.Ⴍ = ⴈႥ2;
					ⴈႥ3.Ⴀ = ⴈႥ;
					ⴈႥ2.Ⴗ = ⴈႥ3;
					ⴈႥ.Ⴗ = ⴈႥ3;
					num = ((ⴈႥ3.Ⴅ != -1) ? 66 : 74);
					break;
				case 74:
					ⴈႥ2.Ⴅ = 0;
					ⴈႥ.Ⴅ = 1;
					num = 24;
					break;
				case 66:
					num = ((ⴈႥ3.Ⴅ != 0) ? 39 : 64);
					break;
				case 64:
					ⴈႥ2.Ⴅ = 0;
					ⴈႥ.Ⴅ = 0;
					num = 24;
					break;
				case 39:
					ⴈႥ2.Ⴅ = -1;
					ⴈႥ.Ⴅ = 0;
					num = 24;
					break;
				case 24:
					ⴈႥ3.Ⴅ = 0;
					num = 38;
					break;
				case 38:
					num = 6;
					break;
				case 84:
					num = ((ⴈႥ.Ⴅ != 2) ? 16 : 21);
					break;
				case 21:
					ⴈႥ2 = ⴈႥ.Ⴀ;
					num = ((ⴈႥ2.Ⴅ != 1) ? 80 : 9);
					break;
				case 9:
					ⴈႥ2.Ⴗ = ⴈႥ.Ⴗ;
					num = ((ⴈႥ.Ⴗ != null) ? 4 : 23);
					break;
				case 23:
					Ⴀ = ⴈႥ2;
					num = 47;
					break;
				case 4:
					num = ((ⴈႥ.Ⴗ.Ⴍ != ⴈႥ) ? 69 : 49);
					break;
				case 49:
					ⴈႥ.Ⴗ.Ⴍ = ⴈႥ2;
					num = 72;
					break;
				case 69:
					ⴈႥ.Ⴗ.Ⴀ = ⴈႥ2;
					num = 72;
					break;
				case 72:
					num = 47;
					break;
				case 47:
					ⴈႥ.Ⴀ = ⴈႥ2.Ⴍ;
					num = ((ⴈႥ.Ⴀ == null) ? 32 : 54);
					break;
				case 54:
					ⴈႥ.Ⴀ.Ⴗ = ⴈႥ;
					num = 32;
					break;
				case 32:
					ⴈႥ2.Ⴍ = ⴈႥ;
					ⴈႥ.Ⴗ = ⴈႥ2;
					ⴈႥ2.Ⴅ = 0;
					ⴈႥ.Ⴅ = 0;
					num = 81;
					break;
				case 80:
					ⴈႥ3 = ⴈႥ2.Ⴍ;
					ⴈႥ3.Ⴗ = ⴈႥ.Ⴗ;
					num = ((ⴈႥ.Ⴗ != null) ? 76 : 65);
					break;
				case 65:
					Ⴀ = ⴈႥ3;
					num = 36;
					break;
				case 76:
					num = ((ⴈႥ.Ⴗ.Ⴍ != ⴈႥ) ? 10 : 46);
					break;
				case 46:
					ⴈႥ.Ⴗ.Ⴍ = ⴈႥ3;
					num = 13;
					break;
				case 10:
					ⴈႥ.Ⴗ.Ⴀ = ⴈႥ3;
					num = 13;
					break;
				case 13:
					num = 36;
					break;
				case 36:
					ⴈႥ2.Ⴍ = ⴈႥ3.Ⴀ;
					num = ((ⴈႥ2.Ⴍ == null) ? 11 : 35);
					break;
				case 35:
					ⴈႥ2.Ⴍ.Ⴗ = ⴈႥ2;
					num = 11;
					break;
				case 11:
					ⴈႥ.Ⴀ = ⴈႥ3.Ⴍ;
					num = ((ⴈႥ.Ⴀ != null) ? 1 : 57);
					break;
				case 1:
					ⴈႥ.Ⴀ.Ⴗ = ⴈႥ;
					num = 57;
					break;
				case 57:
					ⴈႥ3.Ⴀ = ⴈႥ2;
					ⴈႥ3.Ⴍ = ⴈႥ;
					ⴈႥ2.Ⴗ = ⴈႥ3;
					ⴈႥ.Ⴗ = ⴈႥ3;
					num = ((ⴈႥ3.Ⴅ != 1) ? 18 : 30);
					break;
				case 30:
					ⴈႥ2.Ⴅ = 0;
					ⴈႥ.Ⴅ = -1;
					num = 5;
					break;
				case 18:
					num = ((ⴈႥ3.Ⴅ != 0) ? 52 : 29);
					break;
				case 29:
					ⴈႥ2.Ⴅ = 0;
					ⴈႥ.Ⴅ = 0;
					num = 5;
					break;
				case 52:
					ⴈႥ2.Ⴅ = 1;
					ⴈႥ.Ⴅ = 0;
					num = 5;
					break;
				case 5:
					ⴈႥ3.Ⴅ = 0;
					num = 81;
					break;
				case 81:
					num = 6;
					break;
				case 16:
					num = 33;
					break;
				case 33:
					num = ((ⴈႥ.Ⴅ == 0) ? 67 : 82);
					break;
				case 82:
					num2 = ((ⴈႥ.Ⴗ != null) ? 1 : 0);
					goto IL_097c;
				case 67:
					num2 = 0;
					goto IL_097c;
				case 6:
					num = 42;
					break;
				case 42:
					Ⴗ++;
					result = true;
					num = 61;
					break;
				case 61:
					{
						return result;
					}
					IL_097c:
					num = ((num2 != 0) ? 77 : 6);
					break;
				}
			}
		}

		public unsafe bool ႭႰႰ(Ⴃ Ⴍ)
		{
			int num = 2;
			ႨႥ ⴈႥ = default(ႨႥ);
			int num2 = default(int);
			bool result = default(bool);
			while (true)
			{
				switch (num)
				{
				default:
					num = ((Ⴍ != null) ? 10 : 3);
					break;
				case 3:
					throw new ArgumentNullException();
				case 10:
					ⴈႥ = Ⴀ;
					num = 0;
					break;
				case 11:
					num2 = Ⴍ.CompareTo(*(Ⴃ*)(&ⴈႥ.Ⴗ));
					num = ((num2 >= 0) ? 4 : 6);
					break;
				case 6:
					ⴈႥ = ⴈႥ.Ⴍ;
					num = 5;
					break;
				case 4:
					num = ((num2 <= 0) ? 7 : 9);
					break;
				case 9:
					ⴈႥ = ⴈႥ.Ⴀ;
					num = 5;
					break;
				case 7:
					result = true;
					num = 8;
					break;
				case 5:
					num = 0;
					break;
				case 0:
					num = ((ⴈႥ == null) ? 1 : 11);
					break;
				case 1:
					result = false;
					num = 8;
					break;
				case 8:
					return result;
				}
			}
		}


		public unsafe void ႭႰ(Ⴃ[] Ⴍ, int Ⴄ)
		{
			int num = 18;
			ႨႥ ⴈႥ = default(ႨႥ);
			while (true)
			{
				int num2;
				switch (num)
				{
				case 1:
					return;
				default:
					num = ((Ⴍ != null) ? 20 : 19);
					break;
				case 19:
					throw new ArgumentNullException();
				case 20:
					num = ((Ⴄ < 0) ? 13 : 14);
					break;
				case 14:
					num2 = ((Ⴄ < Ⴍ.Length) ? 1 : 0);
					goto IL_00b3;
				case 13:
					num2 = 0;
					goto IL_00b3;
				case 27:
					throw new ArgumentOutOfRangeException();
				case 9:
					num = ((Ⴍ.Length - Ⴄ >= Ⴗ) ? 26 : 6);
					break;
				case 6:
					throw new ArgumentException();
				case 26:
					num = ((Ⴀ == null) ? 1 : 12);
					break;
				case 12:
					ⴈႥ = Ⴀ;
					num = 24;
					break;
				case 21:
					ⴈႥ = ⴈႥ.Ⴍ;
					num = 24;
					break;
				case 24:
					num = ((ⴈႥ.Ⴍ != null) ? 21 : 17);
					break;
				case 17:
					num = 15;
					break;
				case 25:
					Ⴍ[Ⴄ] = *(Ⴃ*)(&ⴈႥ.Ⴗ);
					num = ((ⴈႥ.Ⴀ != null) ? 8 : 22);
					break;
				case 22:
					num = 23;
					break;
				case 3:
					num = ((ⴈႥ.Ⴗ != null) ? 10 : 7);
					break;
				case 7:
					num = 1;
					break;
				case 10:
					num = ((ⴈႥ == ⴈႥ.Ⴗ.Ⴀ) ? 11 : 2);
					break;
				case 2:
					num = 28;
					break;
				case 11:
					ⴈႥ = ⴈႥ.Ⴗ;
					num = 23;
					break;
				case 23:
				{
					bool flag = true;
					num = 3;
					break;
				}
				case 28:
					ⴈႥ = ⴈႥ.Ⴗ;
					num = 16;
					break;
				case 8:
					ⴈႥ = ⴈႥ.Ⴀ;
					num = 4;
					break;
				case 0:
					ⴈႥ = ⴈႥ.Ⴍ;
					num = 4;
					break;
				case 4:
					num = ((ⴈႥ.Ⴍ == null) ? 5 : 0);
					break;
				case 5:
					num = 16;
					break;
				case 16:
					Ⴄ++;
					num = 15;
					break;
				case 15:
					{
						bool flag = true;
						num = 25;
						break;
					}
					IL_00b3:
					num = ((num2 != 0) ? 9 : 27);
					break;
				}
			}
		}
